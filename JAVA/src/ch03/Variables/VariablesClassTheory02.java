package ch03.Variables;

public class VariablesClassTheory02 {
    public static void main(String[] args) {
        /*
            변수는 기본형과 참조형으로 나누어 집니다.

            8개의 기본형 타입
            문자형
            char

            정수형
            byte, short, int, long

            실수형
            float, 
            double -> 좀 더 정밀한 값을 표현할때 사용

            논리형
            boolean
        */

        /*
            선언하고 초기화

            변수를 선언하고 값을 바로 할당하면, 메모리 공간에 저장이 됩니다.
            int amount = 3000;

            이런 형태로 선언 후 바로 값을 항당하는 것을 초기화라고 합니다.
        */

        /*
            기본형 특징

            1. 변수의 생성이 편리합니다.
            2. 사용빈도가 높습니다.
            3. 기본이 되는 타입입니다.
            4. 연산이 가능합니다.
        */

        /*
            참조형이란?
            
            클래스를 기반으로 하는 타입을 말합니다.
            글래스를 기반으로 하는 '형' 이라고 생각하시면 됩니다.

            1. 자바 API에 나와 있는, 이미 jdk에 존재하는 클래스를 기반으로 하는 타입과,
            2. 사용자가 정의하여 만든 클래스로 만든 타입이 있습니다.
            기본형을 제외한 모든 타입을 참조형이라고 할 수 있습니다.
            기본형처럼 보이지만 실제로는 참조형인 것이 String입니다.
        */

        /*
            참조형 예시
            Goods gds = new Goods();

            참조형을 부르는 형식입니다.
            프로그래머가 정의하여 만들기 때문에 사용자에 맞는 타입을 만들 수 있습니다.
            이런 타입의 내부에는 다양한 속성을 만들 수 있습니다.

            참조변수 예시

            Public class GoodsVO {
                public String gdsNO;    품목번호 속성
                public String gdsName;  품목명 속성
                public int gdsPrice;    품목단가 속성
                public String unit;     품목단위 속성
            }
        */

        /*
            참조형

            클래스 속성에는 전역변수, 멤버변수가 있다.
            모든 클래스는 참조형이다.
            클래스를 new 연산자를 통채 메모리에 할당하여 
            사용할 수 있게 하는 것을 객체의 생성이라 한다.

            전역변수 : 객체가 생성되어 소멸되 떄까지 데이터를 유지한다.
            위와 같은 성격 때문에 객체의 속성은 전역변수를 통해 사용한다.
            객체의 속성을 표현할 때는 주로 전역변수를 통해 표현한다.

            참조형의 쓰임새

            하나의 정보에는 여러 개의 속성이 필요할 때가 있다.
            실무에 들어가면 단순 데이터만 다루지 않는다.
            문자열, 정수형, 실수형 등으로 복잡하게 이루어진 정보를 다룰 때가 많다.
            그렇기 때문에 복작한 정보를 표현하기 위해 참조형 변수가 필요하다.
        */

        /*
            클래스의 전역변수의 쓰임새

            클래스의 전역변수는 객체 생성 후 소멸 시까지 데이터를 유지한다.
            한 객체는 여러 개의 속성을 가진다.
            속성은 객체의 소멸 시까지 같이 따라다녀야 한다.
            그렇기 때문에 객체의 속성은 전역변수를 사용하여 표현하고,
            이것이 클래스의 전역변수의 쓰임새이다.
        */

        /*
            비트[bit]와 바이트[byte]
            비트는 0과 1의 값을 저장하는 최소 단위.
            파일 사이즈에서 많이 사용하는 것은 byte.
            1byte는 8bit로 구성.
            1byte가 나타낼 수 있는 경우의 수는 2의 8승.
            256가지의 경우의 수를 의미한다.

            기본형 정수 변수로는 int형을 주로 사용
            byte는 문자, 파일과 관련하여 사용.
            String 인코당, File Input Output Stream, Network 등에서 byte가 사용된다.
            long의 경우 뒤에 L을 붙인다.
            int보다 범위가 큰 자료형 타입이다

            실수형에는 double을 많이 사용한다
            float은 뒤애 f를 붙인다
            char는 한 글자 단위의 문자를 나타내는 타입이다.
            작은 따옴표를 이용하여 표현한다.
            문자는 '숫자, 한글, 영문자, 특수문자'를 나타낼 수 있다

            boolean은 true, flase 2가지 값을 가진다.
            조건문에서 boolean이 많이 쓰이는 편이다.
        */

        /*
            기본형의 형 변환, 캐스팅(casting)

            특정 타입의 변수를 다른 타입의 변수로 나타내고자 할 때 자주 사용됨.
            형변환타입 변수 A = (형변환타입) 변수 B;
            괄호 안의 형을 통해서 변수 B의 형을 변수 A의 형으로 바꾸는 것을 의미한다.

            변수의 형태를 변환하는 것을 형변환이라 하고 캐스팅(Casting)이라고 한다.

            업캐스팅(Upcasting)
            업캐스팅
            1. 값의 손실이 없다.
            int price = 10;
            double dbPrice = (double) price; 결과값은 10.0이 된다. 값의 손실이 없다.

            2. 형변환 연상자 생략이 가능하다.
            int price = 10;
            double dbPrice =10;
            double dbprice = price;

            다운캐스팅(Downcasting)
            값의 손실이 있을 수 있으며, 형변환 연산자를 반드시 명시해야 한다.
            double Price = 100.4321;
            int intPrice = (int) dbPrice;
            결과는 100으로 값의 손실이 있다
        */

        /*
            참조형의 전역변수와 지역변수
            
            구분               전역변수                     지역변수
            선언위치           클래스 내부에 선언            함수 내부에 선언
            소멸 시기          객체가 소멸 시 소멸           함수가 종료 시 소멸
            메모리 위치        Heap 메모리 영역에 저장       Stack 메모리 영역에 저장
        */

        /*
            객체 기본 연산
            구분        연산자          설명
            대입        =               객체의 주소 정보를 좌향에 대입
            객체비교    ==              두 객체 참조 메모리 주소
                                        : 같을경우 true
                                        : 다를경우 false
                                        기본형의 경우 값을 비교한다
            타입비교    instanceof      객체가 해당 타입인지 비교
                                        : 타입이 같을경우 true
                                        : 타입이 다를경우 false
            객체 비교 == 은 메모리 주소만 비교. 
            타입 비교는 해당 참조 변수의 타입을 확인하는데 사용
        */

        /*
            String 타입
            ""형태로 선언하는 리터럴 방식은 String constant pool 방식을 활용
            String constant pool이라는 별도의 메모리 공간이 존재.
            상수풀에 문자열 값이 없을 경우엔 값을 저장하고 메모리 주소를 반환.
            값이 존재할 경우엔 해당 문자열의 메모리 주소를 반환.

            만약 같은 값을 리터럴 형태로 선언하면 같은 메모리 주소를 가짐
            
            
            String 타입 생성 방식

            String 변수는 참조형 변수이다
            String은 2가지 생성 방식을 갖는다

            리터럴 방식 
            new 연산자 없이 생성이 가능
            : String strName= "bear";
            String constant pool메모리 영역에 저장
            : Heap 메모리 영역 내의 별도 영역에 위치함

            new 연산자 방식
            참조형 기본 객체 생성 방식
            : String strName = new String("bear");
            참조형 변수와 같이 Heap메모리 영역에 저장

        */
    }
}
