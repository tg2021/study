package ch18.opp.generics;

public class GenericsTheory {
    /*
        제네릭스 사용 목적

        타입의 동적 처리나 사용할 수 있는 타입을 제한하기 위해서 사용한다.
        타입은 자료형을 의미한다.
        
        int, Integer, String, byte, Byte등의 자료형을 뜻한다.


        제네릭스 사용법

        제네릭스의 타입은 일반적으로 사용되는 타입명의 규칙들이 존재한다.
        타입 파라미터는 extends를 사용하여 일정한 제한들 둘 수 있다.

        제네릭스 와일드카드 타입
        <?>

        와일드카드 타입<?>은 타입 파라미터가 제네릭 타입인 경우 사용되며
        모든 타입을 허용해야 하는 경우 사용된다.
        <?>
        어떤 타입도 가능하다
        <? extends A>
        A 클래스를 포함한 A클래스 하위 클래스 중 어느 것이라도 들어갈 수 있다.
        <? super A>
        A 클래스를 포함한 A클래스 상위 클래스 중 어느 것이라도 들어갈 수 있다.


        기본형, Wrapper 클래스

        기본형 타입은 제네릭스의 타입 파라미터로 사용할 수 없다.
        기본형 타입은 대신 Wrapper 클래스를 사용해야한다.

        Wrapper 클래스 (앞글자가 대문자이면 Wrapper 클래스라고 생각)
        Byte, Short, Integer, Long, Float, Double, Character, Boolean


        타입 파라미터 명명 규칙

        타입명       사용방법
        E           Element의 구성요소
                    Collection에서 주소사용
                    Collection은 List, Mao 등의
                    자료구조를 의미

        K           Key의 의미로 사용
                    V와 함께 Map에서 주로 사용

        V            Value의 의미로 사용
                    K와 함께 Map에서 주로 사용

        N           Number

        T           일반 타입

        S           두 번째 타입

        U           세 번째 타입

        타입 파라미터는 대문자이면서 하나인 단일 문자를 주로 사용한다 E, K, V 등
        강제 사항은 아니지만 일반적으로 약속된 타입명의 규칙이 존재한다.
        중복하여 타입 파라미터를 정의할 수 없다.
        <K, V>형태로 지정


        상속에서의 제네릭스

        A 클래스, B 클래스, C 클래스가 존재
        B 클래스는 A 클래스를 상속받는다. A > B
        C 클래스는 B 클래스를 상속받는다. B > C
        A가 최상위 부모이고 C가 최하위 자식 클래스이다.
        A > B > C
    */
}
