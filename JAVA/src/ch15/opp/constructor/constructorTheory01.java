package ch15.opp.constructor;

public class constructorTheory01 {
    /*
        생성자

        객체가 생성될 때 호출되는 객체 초기화 메서드.
        코드가 실생될 때 같이 동작되며 객체의 초기화 기능을 수행한다.


        어떤 경우에 사용하는가?

        객체 변수 초기화 작업.
        객체 생성 시 실행되어야 할 작업을 위해서 사용.


        생성자와 메서드의 차이점

        생성자는 클래스 내에 선언된다.
        구조도 메서드와 유사함.
        하지만 리턴값이 없으면 void 키워드로 붙이지 않음.
        타입으로도 아무 것도 코딩하지 않음.


        생성자의 조건

        생성자의 이름은 클래스의 이름과 같아야 한다.
        생성자는 리턴 값이 없다.


        생성자의 특이점
        오버로딩도 가능하므로 하나의 클래스에 여러 개의 생성자가 존재할 수 있다.

        
        생성자 오버로딩의 예시

        class Computer {

            Computer() {
    
            }
    
            Computer(String cpuName) {
    
            }
        }


        생성자의 생성

        new Computer에서 new 연산자가 객체를 생성하는 것.

        생성자는 객체를 생성하는 것이 아니다.

        생성자는 객체 변수들의 초기화에 사용되는 메서드인데.
        몇가지 특징만 제외하면 메서드와 동일하다고 보면 된다.

        Computer cp = new Computer();
        Computer() 이것이 생성자이다.
        객체를 생성할 때 반드시 클래스 내에 정의된 생성자 중의 하나를 선택하여 지정해 줘야 한다.
    */

    /*
        기본 생성자

        default constructor라고 부르는 기본 생성자가 존재한다.

        클래스 작성 시 생성자를 정의하지 않았을 때
        기본 생성자 new Computer()를 사용할 수 있는 이유는
        컴파일러가 제공하는 기본 생성자가 있기 때문이다.

        컴파일러는 자바 소스 파일을 컴파일 할 때 생성자가 하나도 없으묜
        자동적으로 클래스 이름() {}의 기본 생성자를 추가하여 컴파일한다/

        생성자를 통해 특별한 직업을 할 것이 아니면 
        클래스 작성 시에는 이런 기본 생성자를 활용하면 된다.


        기본 생성자 특이점

        내부에 파라미터가 존재한느 생성자를 코딩했을 시
        파라미터가 없는 기본 생성잘르 사용하면 에러가 발생한다.

        Computer(String cpuName) {} 이라는 파라미터가 존재하는 생성자 생성 시 

        Computer cp = new Computer("Intel"); 이라는 형태의 생성자를 이용하여
        객체를 생성해야한다.

        new Computer();의 기본 생성자를 사용하려고 하면 파라미터가 존재하는 생성자를
        만들었기 때문에 에러가 난다.

        만약 파라미터가 없는 생성자를 같이 사용하고 싶다면 클래스에
        Computer() {} 기본생성자를 코딩해 줘야 한다.

        기본 생성자 결론
        컴파일러에 의해 기본 생성자가 추가되는 경우는 
        클래스에 정의된 생성자가 하나도 없을 때 뿐이다.

    */
        
    /*
        매개변수가 있는 생성자

        예시)
        class Computer {
            String cpuName;
            String gpuName;

            Computer(String cN, String gN) {
                cpuName = cN;
                gpuName = gN;
            }
        }

        객체 생성 시 별도의 초기화 작업을 하지 않고
        생성과 도잇에 원하는 겂으로
        초가회를 하려고 할 때 사용하는 생성자.

        예시)
        Computer cp = new Computer();
        cp.cpuName = "intel";
        cp.gpuName = "nvd";

        이런 것을 아래와 같이 한다.

        Computer pc = new Computer("intel", "nvd");
        

        매개변수가 있는 생성자
        매개변수가 있는 생성자를 포함했을 때는 기본 생성자가 생성되지 않는다.
        때문에 Computer cp = new Computer();를 사용하고 싶다면

        Computer() {

        }
        를 선언해 줘야 한다.
    */

    /*
        생성자에서 다른 생성자 호출

        this()와 this
        생성자끼리 서로 호출이 가능한데, 이럴 때 사용하는 것이다

        두 가지 조건
        1. 생성자의 이름으로 클래스 이름 대신 this를 사용한다.
        2. 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다.


        생성자 내 변수 관련 this

        this가 붙으면 생성자 내의 지역변수가 아니다. this는 객체 자신을 가리키는 참조변수이다.
        객체의 주소가 저장되어 있으며 모든 객체 메서드에 지역변수로 숨겨진 채로 존재
        
    */
}
