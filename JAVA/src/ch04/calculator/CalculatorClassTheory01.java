package ch04.calculator;

public class CalculatorClassTheory01 {
    public static void main(String[] args) {
        /*
            산술 연산자.

            산술은 2개 이상의 수를 합치는 모든 계산을 뜻함.
            계산하는 연산자

            연산자      기능                        사용법
            =           저장                        a = b; 
            +           더하기                      a = b + c;
            -           빼기                        a = b - c;
            *           곱하기                      a = b * c;
            /           나누기                      a = b / c;
            %           나눈 나머지를 구하기         a = b % c;

            또 다른 형태의 산술 연산자.

            연산자      기능                        사용법 
            +=          더하기                      a += b;
            -=          빼기                        a -= b;
            *=          곱하기                      a *= b;
            /=          나누기                      a /= b;
            %=          나눈 나머지를 구하기         a% = b;
        */

        /*
            값을 1씩 증가, 감소 시키는 연산자.

            연산자      기능                        사용법 
            ++          1을 더한다.                 a++ 또는 ++a
            --          1을 뺀다.                   a-- 또는 --a
        */

        /*
            비교 연산자
            연산자      기능                        사용법
            >           크다(>)                     a > b
            <           작다(<)                     a < b
            >=          크거나 같다(>=)             a >= b
            <=          작거나 같다(<=)             a <= b
            ==          같다(=)                    a == b
            !=          같지 않다(!=)              a != b

            비교 연산자의 결과는 참과 거짓으로 나온다.
            조건문에서 비교 연산자를 사용하여 그 결과 값에 따라서 조건문을 실행한다.
        */

        /*
            논리 연산자
            and, or의 조건을 구분할 때 자주 쓰인다.
            그리고, 또는, 의 조건을 의미한다
            연산자      기능                        사용법                      해석
            ||          또는                (a == 1) || (a == 2)         a는 1 또는 2일 경우
            &&          그리고              (a > 2) && (a < 1)           a가 2보다 크고 그리고 a가 1보다 작을 경우       
            !           ~이 아니다           !(a == 1)                   a는 1이 아닐 경우
        */

        /*
            연산자 우선 순위
            우선순위    연산자
            1           [], ()
            2           !, ++, --, (캐스트 연산자)
            3           *, /, %
            4           +, -
            5           <<, >>
            6           <, >, >=, <=, ==, !=
            7           &&
            8           ||
            9           =, +=, -=, *=, /=, %=, <<=, >>=

            연산자 우선순위를 가장 쉽게 아는 방법
            연산은 왼쪽에서 오른쪽으로 계산된다.
            곱셈과 나눗셈이 먼저 계산된다.
            괄호 먼저 계산한다.
            
            가장 좋은 방법은 먼저 계산할 것을 괄호로 묶는 것이다.
        */

        /*
            시프트 연산자
            <<, >>는 시프트 연산자이다.
            1bit씩 옮긴다는 의미의 연산자이다.
            시프트 연산자는 자주 쓰인느 경우는 없다.
            계산 방식이 bit 연산을 통해 계산하는 방식이라,
            코딩하는 사람이 빠르게 계산하기 힘들기 때문이다.
        */
    }
}
